/* gradle env */
plugins {
    id "fabric-loom" version "1.7.+"
    id "maven-publish"
    id "com.modrinth.minotaur" version "2.+"
    id "java"
    id "idea"
}

repositories {
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://jitpack.io" }
    maven { url "https://masa.dy.fi/maven" }
    maven { url "https://maven.nucleoid.xyz" }
    maven { url "https://projectlombok.org/edge-releases" }
}

/* project props */
version = project.mod_version
group = project.maven_group

base {
    archivesName = project.mod_id
}

/* fabric env */
loom {

    accessWidenerPath = file("src/main/resources/fuji.accesswidener")

    mods {
        "fuji" {
            sourceSet sourceSets.main
        }
    }

    runs {
        configureEach {
            vmArgs("-Xms8G -Xmx8G -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=40 -XX:G1MaxNewSizePercent=50 -XX:G1HeapRegionSize=16M -XX:G1ReservePercent=15 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -XX:+UseLargePages -XX:+UseTransparentHugePages -Duser.timezone=GMT+08 -Dfuji.level=debug -Dmixin.debug.export=false".split(" "))
        }
    }
}

/**
 * Each time adds a new library, you should build the software, and go to the production-env to check whether the library works.
 *
 * It's possible the necessary libraries are not packed into the release package, even you `include` the library ...
 *
 */
dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings_version}"
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

    compileOnly "org.projectlombok:lombok:${project.lombok_version}"
    annotationProcessor "org.projectlombok:lombok:${project.lombok_version}"
    testCompileOnly "org.projectlombok:lombok:${project.lombok_version}"
    testAnnotationProcessor "org.projectlombok:lombok:${project.lombok_version}"

    implementation "com.google.code.gson:gson:${project.gson_version}"
    include(implementation "com.jayway.jsonpath:json-path:${project.json_path_version}")
    include(implementation "net.minidev:json-smart:${project.json_path_smart_version}")
    include(implementation "net.minidev:accessors-smart:${project.json_path_smart_version}")

    modImplementation("carpet:fabric-carpet:${project.carpet_core_version}")

    include(implementation "net.luckperms:api:${project.luckperms_api_version}")

    include(modImplementation("net.kyori:adventure-platform-fabric:${project.adventure_platform_fabric_version}"))
    include(implementation "net.kyori:adventure-text-minimessage:${project.adventure_api_version}")

    include(modImplementation("eu.pb4:sgui:${project.sgui_version}"))
    include(modImplementation("eu.pb4:placeholder-api:${project.placeholder_api_version}"))
    include(modImplementation("eu.pb4:polymer-virtual-entity:${project.polymer_virtual_entity_version}"))

    implementation "me.lucko:spark-api:${project.spark_api_version}"

    include(implementation "org.apache.commons:commons-compress:${project.apache_commons_compression_version}")

    include(implementation "org.apache.commons:commons-rng-core:${project.apache_commons_rng_version}")
    include(implementation "org.apache.commons:commons-rng-client-api:${project.apache_commons_rng_version}")
    include(implementation "org.apache.commons:commons-rng-simple:${project.apache_commons_rng_version}")


    include(implementation "commons-io:commons-io:${project.apache_commons_io_version}")

    include(implementation "org.jetbrains:annotations:${project.jetbrains_annotations_version}")

    include(implementation "org.quartz-scheduler:quartz:${project.quartz_version}")

    testImplementation(platform("org.junit:junit-bom:${project.junit_version}"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    include(implementation "io.github.classgraph:classgraph:${project.classgraph_version}")
}

/* compile */
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release.set(21)
    configure(options) {
        // for command annotation processor reflection
        options.compilerArgs << '-parameters'
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

/* build */
processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

jar {
//    def gitProps = new Properties()
//    file("git.properties").withInputStream { gitProps.load(it) }

    from("LICENSE") {
        rename { "${it}-mc${minecraft_version}-${project.base.archivesName.get()}" }
    }
}

/* publish */
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {}
}

modrinth {
    token = "$System.env.MODRINTH_TOKEN"
    projectId = "1TowMm2v"
    versionNumber = "$mod_version"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = ["1.21"]
    loaders = ["fabric", "quilt"]
    dependencies {
        required.project "fabric-api"
        optional.project "luckperms"
        optional.project "carpet"
        optional.project "spark"
        embedded.project "placeholder-api"
    }
    syncBodyFrom = rootProject.file("README.md").text
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

/* test framework */
test {
    useJUnitPlatform()
    filter {}
}

/* validate the access widener file */
tasks.compileJava.dependsOn(validateAccessWidener)

/* mixin Registry checker is used to check the un-registered mixins, to avoid un-expected circumstance. */
tasks.register("checkMixinRegistryTest") {
    outputs.upToDateWhen { false }
    test {
        filter {
            includeTestsMatching "CheckMixinRegistryTest.test"
        }
    }
}
tasks.compileJava.dependsOn(checkMixinRegistryTest)

/* module dependency checker is used to check whether a `module` reference another `module` directly or in-directly.
*
*  Our design objective is that: a module should be standalone, and should no reference other modules.
*  If two modules share the same code or the logic, then:
*    1. They should be re-organized as sub-module relation.
*    2. Or just extract the common codes into the `common` package.
*
* */
tasks.register("checkModuleDependencyTest") {
    outputs.upToDateWhen { false }
    test {
        filter {
            includeTestsMatching "CheckModuleDependencyTest.test"
        }
    }
}
tasks.compileJava.dependsOn(checkModuleDependencyTest)